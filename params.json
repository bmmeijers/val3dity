{"name":"val3dity","tagline":"Validation of solids according to the international standard ISO 19107","body":"# val3dity\r\n\r\nValidation of solids according to the international standard ISO 19107.\r\n\r\n\r\n## How do I use val3dity?\r\n\r\nIt is a command-line program, which we provide as source code, together with makefiles for Mac and Linux. We plan on offering binaries (including for Windows) in the future.\r\n\r\nTo compile val3dity, you first need to install the free libraries [CGAL](http://www.cgal.org), [GEOS](http://trac.osgeo.org/geos/) and [CMake](http://www.cmake.org)--under Mac we suggest using [Homebrew](http://brew.sh/). Afterwards run:\r\n\r\n    $ cmake .\r\n    $ make\r\n    \r\nTo execute val3dity:\r\n\r\n    $ ./val3dity outershell.poly innershell1.poly innershell2.poly\r\n    \r\nEach shell of the solid must be modelled with a [POLY](http://tetgen.berlios.de/fformats.poly.html) file, the first argument is always the outer shell, and the others are inner shells.\r\nThere can be 0 or an infinity of inner shells, their order is not important.\r\nFor instance, to validate a solid having only one outer shell (it's a unit cube):\r\n\r\n```  \r\n$ ./val3dity data/poly/cube.poly\r\nReading 1 file(s).\r\nReading outer shell:\tdata/poly/cube.poly\r\n\r\nValidating surface in 2D with GEOS (their projection)\r\n-----all valid\r\n\r\nTriangulating outer shell\r\n-----done\r\n\r\nValidating shell #0\r\n-----Planarity\r\n\tyes\r\n-----Combinatorial consistency\r\n\tyes\r\n-----Geometrical consistency\r\n\tyes\r\n-----Orientation of normals\r\n\tyes\r\nShell #0 valid\r\n\r\nValid solid. Hourrraaa!\r\n```\r\n\r\nAnd to validate a solid with one outer shell and 2 inner shells:\r\n\r\n```\r\n$ ./val3dity data/poly/cube.poly data/poly/py1.poly data/poly/py7.poly\r\nReading 3 file(s).\r\nReading outer shell:\tdata/poly/cube.poly\r\nReading inner shell #0:\tdata/poly/py1.poly\r\nReading inner shell #1:\tdata/poly/py7.poly\r\n\r\nValidating surface in 2D with GEOS (their projection)\r\n-----all valid\r\n\r\nTriangulating outer shell\r\nTriangulating inner shell #0\r\nTriangulating inner shell #1\r\n-----done\r\n\r\nValidating shell #0\r\n-----Planarity\r\n\tyes\r\n-----Combinatorial consistency\r\n\tyes\r\n-----Geometrical consistency\r\n\tyes\r\n-----Orientation of normals\r\n\tyes\r\nShell #0 valid\r\n\r\nValidating shell #1\r\n-----Planarity\r\n\tyes\r\n-----Combinatorial consistency\r\n\tyes\r\n-----Geometrical consistency\r\n\tyes\r\n-----Orientation of normals\r\n\tyes\r\nShell #1 valid\r\n\r\nValidating shell #2\r\n-----Planarity\r\n\tyes\r\n-----Combinatorial consistency\r\n\tyes\r\n-----Geometrical consistency\r\n\tyes\r\n-----Orientation of normals\r\n\tyes\r\nShell #2 valid\r\n\r\nInspecting interactions between the 3 shells\r\nError 400: shells are face adjacent\r\n\t[shell: #1; face: #2]\r\n\r\nInvalid solid :(\r\n```\r\n\r\n\r\n# Error reported \r\n\r\n## Ring level ##\r\n\r\n  * REPEATED_POINTS   \r\n  * RING_NOT_CLOSED   \r\n  * RING_SELF_INTERSECT\r\n\r\n## Surface level ##\r\n\r\n  * SELF_INTERSECTION  \r\n  * NON_PLANAR_SURFACE                     \r\n  * INTERIOR_DISCONNECTED\r\n  * HOLE_OUTSIDE\r\n  * HOLES_ARE_NESTED                      \r\n\r\n## Shell level ##\r\n\r\n  * NOT_VALID_2_MANIFOLD\r\n    * SURFACE_NOT_CLOSED                     \r\n    * DANGLING_FACES                         \r\n    * FACE_ORIENTATION_INCORRECT_EDGE_USAGE  \r\n    * FREE_FACES                             \r\n    * SURFACE_SELF_INTERSECTS                \r\n  * VERTICES_NOT_USED                      \r\n  * SURFACE_NORMALS_WRONG_ORIENTATION      \r\n\r\n## Solid level\r\n\r\n  * SHELLS_FACE_ADJACENT                   \r\n  * SHELL_INTERIOR_INTERSECT               \r\n  * INNER_SHELL_OUTSIDE_OUTER              \r\n  * INTERIOR_OF_SHELL_NOT_CONNECTED        \r\n  \r\n\r\n\r\n## I'm interested in the details of how the validation is performed ##\r\n\r\nThe validation is performed hierarchically, ie first every surface are validated in 2D (with [GEOS](http://trac.osgeo.org/geos/)), then every shell is validated (must be watertight, no self-intersections, orientation of the normals must be consistent and pointing outwards, etc.), and finally the interactions between the shells are analysed.\r\n\r\nMost details about the implementation are available in this [scientific article](http://homepage.tudelft.nl/23t4p/pdfs/_13cacaie.pdf).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}